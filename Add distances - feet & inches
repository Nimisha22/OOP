#include <iostream>
using namespace std;

class Distance {
   private:
      int feet;             // 0 to infinite
      int inches;           // 0 to 12

   public:
      // required constructors
      Distance() {
         feet = 0;
         inches = 0;
      }
      Distance(int f, int i) {
         feet = f;
         inches = i;
      }

      // method to display distance
      void displayDistance() {
         cout << "F: " << feet << " I: " << inches <<endl;
      }

      // overloaded minus (-) operator
      Distance operator- () {
         feet = -feet;
         inches = -inches;
         return Distance(feet, inches);
      }

      void add(Distance d1, Distance d2) {
         Distance d3;
         d3.inches = d1.inches + d2.inches;
         if(d3.inches > 12) {
            d3.inches -= 12;
            d3.feet = 1;
         }
         d3.feet = d3.feet + d1.feet + d2.feet;
         cout << "\nFor D3 \nF: " << d3.feet << " I:" << d3.inches <<endl;

      }


};

int main() {
   Distance D1(11, 10), D2(-5, -11), D3;

   cout << "Distance 1 is \n" << endl;
   D1.displayDistance();    // display D1

   -D2;
   cout << "\n\nDistance 2 is \n" << endl;    // apply negation
   D2.displayDistance();    // display D2

   D3.add(D1, D2);
   cout << "\n\nDistance 3 is \n" << endl;
   D3.displayDistance();
   return 0;
}


-------------------------------------------------
Output 

Distance 1 is

F: 11 I: 10


Distance 2 is

F: 5 I: 11

For D3
F: 17 I:9


Distance 3 is

F: 0 I: 0

Process returned 0 (0x0)   execution time : 0.876 s
Press any key to continue.
